schema {
  query: Query
  mutation: Mutations
}

type Bot {
  _id: String
  url: String
  title: String
  price: String
  author: String
  postcode: String
  phoneNumber: String
  disabled: Boolean
  submited: Boolean
  preferences: Boolean
  avability: Boolean
  amenities: Boolean
  submitedBy: String
  createdAt: String
  updatedAt: String
}

type Listing {
  id: String
  availableFrom: Float
  availableTo: Float
  createdAt: Float
  leakage: Boolean
  location: String
  nonResponsive: Boolean
  postcode: String
  title: String
  weeklyRent: Int
  photos: [Photo]
  user: User
}

type Mutations {
  updateHostStatus(input: UpdateHostStatusInput!): UpdateHostStatusPayload
  updateAdvert(input: UpdateAdvertInput!): UpdateAdvertPayload
  sendMessage(input: SendMessageInput!): SendMessagePayload
}

type Notification {
  numberOfUnread: Int
}

type PhoneVerification {
  contactNumber: String
}

type Photo {
  s3Link: String
}

type Query {
  query: Query
  adverts(crawled: Boolean, submited: Boolean, disabled: Boolean): [Bot]
  advertById(id: String): Bot
  listings(lng: Float, lat: Float, radius: Int, startDateInNextDays: Int, listed: Boolean, sortBy: String, direction: String): [Listing]
  notificationById(id: String, token: String): Notification
  users(token: String): [User]
  userById(id: String, token: String): User
}

input SendMessageInput {
  id: String
  clientMutationId: String
}

type SendMessagePayload {
  advert: Bot
  clientMutationId: String
}

input UpdateAdvertInput {
  id: String
  disabled: Boolean
  clientMutationId: String
}

type UpdateAdvertPayload {
  advert: Bot
  clientMutationId: String
}

input UpdateHostStatusInput {
  id: String
  leakage: Boolean
  nonResponsive: Boolean
  clientMutationId: String
}

type UpdateHostStatusPayload {
  listing: Listing
  clientMutationId: String
}

type User {
  id: String
  avatar: String
  email: String
  firstName: String
  lastName: String
  lastLoggedInAt: Float
  phoneVerification: PhoneVerification
  notifications: Notification
}
