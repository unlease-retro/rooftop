schema {
  query: Query
  mutation: Mutations
}

input AddListingToPopularInput {
  id: String
  clientMutationId: String
}

type AddListingToPopularPayload {
  listing: Listing
  clientMutationId: String
}

input AddressInputType {
  contactNumber: String
  city: String
  country: String
  flatNumber: String
  geoLocation: GeolocationInputType
  postcode: String
  sectionCompleted: Boolean
  streetAddress: String
}

input AmenityInputType {
  displayName: String
  included: Boolean
  name: String
}

input AvailabilityInputType {
  bookedDates: [Float]
  duration: Int
  from: String
  minStay: Int
  sectionCompleted: Boolean
  to: String
}

type Bot {
  id: String
  url: String
  title: String
  phoneNumber: String
  disabled: Boolean
  submitted: Boolean
  submittedBy: String
  createdAt: String
  updatedAt: String
  receivedMessage: Boolean
  price: BotPrice
  location: BotLocation
  author: BotAuthor
  preferences: BotPreferences
  avability: BotAvability
  amenities: BotAmenities
  replies: [BotReply]
}

type BotAmenities {
  balcony: String
  garden: String
  parking: String
}

type BotAuthor {
  name: String
  type: String
}

type BotAvability {
  date: String
  maximum: String
  minimum: String
}

type BotLocation {
  postcode: String
  area: String
}

type BotPreferences {
  couples: String
  gender: String
}

type BotPrice {
  unit: String
  value: String
}

type BotReply {
  id: String
  host: Boolean
  thread: String
  message: String
  createdAt: String
}

input CreateAdvertInput {
  payload: InputTypeBot
  clientMutationId: String
}

type CreateAdvertPayload {
  advert: Bot
  clientMutationId: String
}

input CreateListingInput {
  payload: ListingInputType
  clientMutationId: String
}

type CreateListingPayload {
  listing: Listing
  clientMutationId: String
}

input CreateUserInput {
  payload: UserInputType
  clientMutationId: String
}

type CreateUserPayload {
  user: User
  clientMutationId: String
}

input CreateUserWithListingInput {
  payload: UserWithListingInputType
  clientMutationId: String
}

type CreateUserWithListingPayload {
  listing: Listing
  clientMutationId: String
}

input DescriptionInputType {
  amenityItems: [AmenityInputType]
  description: String
  sectionCompleted: Boolean
  title: String
}

input GeolocationInputType {
  coordinates: [String]
  type: String
  x: Float
  y: Float
}

input HomeTruthInputType {
  items: [String]
  sectionCompleted: Boolean
}

input ImageInputType {
  name: String
  s3Link: String
}

input InputTypeBot {
  id: String
  price: InputTypeBotPrice
  author: InputTypeBotAuthor
  url: String
  title: String
  contact: String
  crawled: Boolean
  location: InputTypeBotLocation
  amenities: InputTypeBotAmenities
  avability: InputTypeBotAvability
  disabled: Boolean
  submitted: Boolean
  phoneNumber: String
  submittedBy: String
  preferences: InputTypeBotPreferences
  receivedMessage: Boolean
}

input InputTypeBotAmenities {
  balcony: String
  garden: String
  parking: String
}

input InputTypeBotAuthor {
  name: String
  type: String
}

input InputTypeBotAvability {
  date: String
  minimum: String
  maximum: String
}

input InputTypeBotLocation {
  area: String
  postcode: String
}

input InputTypeBotPreferences {
  couples: String
  gender: String
}

input InputTypeBotPrice {
  unit: String
  value: Int
}

type Listing {
  id: String
  availableFrom: Float
  availableTo: Float
  contactNumber: String
  createdAt: Float
  leakage: Boolean
  location: String
  nonResponsive: Boolean
  postcode: String
  title: String
  weeklyRent: Int
  popular: Boolean
  listed: Boolean
  photos: [Photo]
  user: User
}

input ListingInputType {
  accommodates: Int
  address: AddressInputType
  availability: AvailabilityInputType
  booked: Boolean
  completed: Boolean
  description: DescriptionInputType
  homeTruth: HomeTruthInputType
  homeType: String
  listed: Boolean
  location: String
  photo: PhotoInputType
  pricing: PricingInputType
  referralCode: String
  roommate: RoommateInputType
  roomType: String
}

type Mutations {
  updateAdvert(input: UpdateAdvertInput!): UpdateAdvertPayload
  createAdvert(input: CreateAdvertInput!): CreateAdvertPayload
  createListing(input: CreateListingInput!): CreateListingPayload
  createUserWithListing(input: CreateUserWithListingInput!): CreateUserWithListingPayload
  updateHostStatus(input: UpdateHostStatusInput!): UpdateHostStatusPayload
  addListingToPopular(input: AddListingToPopularInput!): AddListingToPopularPayload
  removeListingFromPopular(input: RemoveListingFromPopularInput!): RemoveListingFromPopularPayload
  createUser(input: CreateUserInput!): CreateUserPayload
}

type Notification {
  numberOfUnread: Int
}

type PhoneVerification {
  contactNumber: String
}

input PhoneVerificationInputType {
  code: String
  contactNumber: String
  verified: Boolean
}

type Photo {
  s3Link: String
}

input PhotoInputType {
  imageList: [ImageInputType]
  lowerLimit: Int = 1
  sectionCompleted: Boolean
  upperLimit: Int = 9
}

input PricingInputType {
  cleaningFee: Int
  deposit: Int
  extraGuestCharge: Int
  sectionCompleted: Boolean
  serviceFee: Float
  weeklyRent: Int
}

type Query {
  query: Query
  allAdverts(submitted: Boolean, disabled: Boolean): [Bot]
  advert(id: String): Bot
  listings(lng: Float, lat: Float, radius: Int, startDateInNextDays: Int, listed: Boolean, sortBy: String, direction: String): [Listing]
  notificationById(id: String, token: String): Notification
  users(token: String): [User]
  userById(id: String, token: String): User
}

input RemoveListingFromPopularInput {
  id: String
  clientMutationId: String
}

type RemoveListingFromPopularPayload {
  listing: Listing
  clientMutationId: String
}

input RoommateInputType {
  maxAge: Int
  minAge: Int
  numOfFemale: Int
  numOfMale: Int
  occupation: [String]
  sectionCompleted: Boolean
}

input UpdateAdvertInput {
  id: String
  payload: InputTypeBot
  clientMutationId: String
}

type UpdateAdvertPayload {
  advert: Bot
  clientMutationId: String
}

input UpdateHostStatusInput {
  id: String
  leakage: Boolean
  nonResponsive: Boolean
  clientMutationId: String
}

type UpdateHostStatusPayload {
  listing: Listing
  clientMutationId: String
}

type User {
  id: String
  avatar: String
  email: String
  firstName: String
  lastName: String
  lastLoggedInAt: Float
  phoneVerification: PhoneVerification
  notifications: Notification
}

input UserInputType {
  id: String
  firstName: String
  lastName: String
  email: String
  password: String
  dob: String
  referralProgramCode: String
  phoneVerification: PhoneVerificationInputType
}

input UserWithListingInputType {
  listing: ListingInputType
  user: UserInputType
}
